# Zennブログ執筆ルール

## 参考文献記載ルール（必須）

### 基本原則
技術記事を執筆する際は、参考にした書籍やネット上の情報がある場合は**必ず参考文献を明記**してください。

### なぜ参考文献の記載が必要か
- 無断で書籍やネットの内容を丸写しするのはマナー違反
- 著者の権利を侵害する行為
- 文責の所在を明確にする必要がある
- 読者が情報の信頼性を判断できる

### 参考にした情報源の例
- 公式APIドキュメントやライブラリのREADME
- GitHubのissue
- 他の人が書いたQiita記事
- 技術書籍
- ブログ記事
- 公式チュートリアル

### 参考文献の記載方法

#### 1. 記事の最後に参考文献セクションを追加
```markdown
## 参考文献

- [プロを目指す人のためのRuby入門](https://gihyo.jp/book/2017/978-4-7741-9397-7) - 伊藤淳一
- [Ruby公式ドキュメント](https://docs.ruby-lang.org/ja/)
- [Qiita: Ruby基礎文法まとめ](https://qiita.com/example/ruby-basics)
```

#### 2. 文中での適切な引用
```markdown
Rubyの文字列操作について、[プロを目指す人のためのRuby入門](https://gihyo.jp/book/2017/978-4-7741-9397-7)では以下のように説明されています：

> Rubyは基本的に改行が文の区切りになります。

この説明を参考に、実際のコード例を示します。
```

### チェックリスト（記事公開前必須確認）

記事を公開する前に、以下を確認してください：

- [ ] 参考にした書籍や記事がある場合は参考文献を明記したか
- [ ] 引用部分は適切に引用符で囲んでいるか
- [ ] 参考文献のリンクが正しく機能するか
- [ ] 著者名や出版年などの情報が正確か
- [ ] 自分のオリジナルな内容と参考にした内容を区別できているか

### 注意事項

- 参考文献の記載なしに公開されるのは、まるでその内容を自分が考えたかのように見える
- 説明に間違いがあった場合、文責は参考元の著者にあることを明確にする
- 「勉強になります！修正します！」ではなく、適切に参考文献を明記する

## 記事執筆時の自動チェック

### チェックコマンド
```bash
# 個別記事のチェック
./scripts/check-article.sh articles/記事名.md

# 全記事のチェック
npm run check:all

# 新記事作成
npm run new:article
```

### チェック項目
- ✅ 参考文献セクションの存在確認
- ✅ 参考リンクの存在確認
- ✅ 参考文献セクション内のリンク数カウント
- ✅ 引用の存在確認

## 参考リンク

- [Qiitaで記事を公開するときに気を付けるべきマナーについて](https://qiita.com/jnchito/items/215c2d51599eb29adabc)
- [WRITING_GUIDELINES.md](./WRITING_GUIDELINES.md) - 詳細なガイドライン

## その他の執筆ルール

### 記事の構造
- タイトルは分かりやすく、検索しやすいものにする
- 適切な見出し構造（##, ###）を使用する
- コードブロックには言語名を指定する

### コードの書き方
- 実行可能なコードを記載する
- コメントで説明を補足する
- エラーハンドリングも含める

### 画像・図表
- 必要に応じて図表を追加する
- 画像は適切なサイズで表示されるようにする
- 図表には説明文を付ける

### タグ・トピック
- 適切なトピックを設定する
- 関連する技術タグを付ける
- 検索性を考慮したタグ選択

## 禁止事項

- 参考文献の記載なしでの無断転載
- 他人のコードや説明文の丸写し
- 出典不明の情報の記載
- 著作権を侵害する行為
